// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:my_app/bean/news_list_bean_entity.dart';
import 'package:my_app/generated/json/news_list_bean_entity_helper.dart';
import 'package:my_app/bean/ip_bean_entity.dart';
import 'package:my_app/generated/json/ip_bean_entity_helper.dart';
import 'package:my_app/bean/dictionary_bean_entity.dart';
import 'package:my_app/generated/json/dictionary_bean_entity_helper.dart';
import 'package:my_app/bean/daily_words_bean_entity.dart';
import 'package:my_app/generated/json/daily_words_bean_entity_helper.dart';
import 'package:my_app/bean/joker_list_bean_entity.dart';
import 'package:my_app/generated/json/joker_list_bean_entity_helper.dart';
import 'package:my_app/bean/news_detail_bean_entity.dart';
import 'package:my_app/generated/json/news_detail_bean_entity_helper.dart';
import 'package:my_app/bean/phone_local_bean_entity.dart';
import 'package:my_app/generated/json/phone_local_bean_entity_helper.dart';
import 'package:my_app/bean/history_today_list_bean_entity.dart';
import 'package:my_app/generated/json/history_today_list_bean_entity_helper.dart';
import 'package:my_app/bean/rubbish_classify_bean_entity.dart';
import 'package:my_app/generated/json/rubbish_classify_bean_entity_helper.dart';
import 'package:my_app/bean/news_classify_bean_entity.dart';
import 'package:my_app/generated/json/news_classify_bean_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case NewsListBeanEntity:
				return newsListBeanEntityFromJson(data as NewsListBeanEntity, json) as T;
			case NewsListBeanData:
				return newsListBeanDataFromJson(data as NewsListBeanData, json) as T;
			case IpBeanEntity:
				return ipBeanEntityFromJson(data as IpBeanEntity, json) as T;
			case IpBeanData:
				return ipBeanDataFromJson(data as IpBeanData, json) as T;
			case DictionaryBeanEntity:
				return dictionaryBeanEntityFromJson(data as DictionaryBeanEntity, json) as T;
			case DictionaryBeanData:
				return dictionaryBeanDataFromJson(data as DictionaryBeanData, json) as T;
			case DailyWordsBeanEntity:
				return dailyWordsBeanEntityFromJson(data as DailyWordsBeanEntity, json) as T;
			case DailyWordsBeanData:
				return dailyWordsBeanDataFromJson(data as DailyWordsBeanData, json) as T;
			case JokerListBeanEntity:
				return jokerListBeanEntityFromJson(data as JokerListBeanEntity, json) as T;
			case JokerListBeanData:
				return jokerListBeanDataFromJson(data as JokerListBeanData, json) as T;
			case NewsDetailBeanEntity:
				return newsDetailBeanEntityFromJson(data as NewsDetailBeanEntity, json) as T;
			case NewsDetailBeanData:
				return newsDetailBeanDataFromJson(data as NewsDetailBeanData, json) as T;
			case NewsDetailBeanDataImages:
				return newsDetailBeanDataImagesFromJson(data as NewsDetailBeanDataImages, json) as T;
			case PhoneLocalBeanEntity:
				return phoneLocalBeanEntityFromJson(data as PhoneLocalBeanEntity, json) as T;
			case PhoneLocalBeanData:
				return phoneLocalBeanDataFromJson(data as PhoneLocalBeanData, json) as T;
			case HistoryTodayListBeanEntity:
				return historyTodayListBeanEntityFromJson(data as HistoryTodayListBeanEntity, json) as T;
			case HistoryTodayListBeanData:
				return historyTodayListBeanDataFromJson(data as HistoryTodayListBeanData, json) as T;
			case RubbishClassifyBeanEntity:
				return rubbishClassifyBeanEntityFromJson(data as RubbishClassifyBeanEntity, json) as T;
			case RubbishClassifyBeanData:
				return rubbishClassifyBeanDataFromJson(data as RubbishClassifyBeanData, json) as T;
			case RubbishClassifyBeanDataAim:
				return rubbishClassifyBeanDataAimFromJson(data as RubbishClassifyBeanDataAim, json) as T;
			case RubbishClassifyBeanDataRecommendList:
				return rubbishClassifyBeanDataRecommendListFromJson(data as RubbishClassifyBeanDataRecommendList, json) as T;
			case NewsClassifyBeanEntity:
				return newsClassifyBeanEntityFromJson(data as NewsClassifyBeanEntity, json) as T;
			case NewsClassifyBeanData:
				return newsClassifyBeanDataFromJson(data as NewsClassifyBeanData, json) as T;    }
		return data as T;
	}

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case NewsListBeanEntity:
				return newsListBeanEntityToJson(data as NewsListBeanEntity);
			case NewsListBeanData:
				return newsListBeanDataToJson(data as NewsListBeanData);
			case IpBeanEntity:
				return ipBeanEntityToJson(data as IpBeanEntity);
			case IpBeanData:
				return ipBeanDataToJson(data as IpBeanData);
			case DictionaryBeanEntity:
				return dictionaryBeanEntityToJson(data as DictionaryBeanEntity);
			case DictionaryBeanData:
				return dictionaryBeanDataToJson(data as DictionaryBeanData);
			case DailyWordsBeanEntity:
				return dailyWordsBeanEntityToJson(data as DailyWordsBeanEntity);
			case DailyWordsBeanData:
				return dailyWordsBeanDataToJson(data as DailyWordsBeanData);
			case JokerListBeanEntity:
				return jokerListBeanEntityToJson(data as JokerListBeanEntity);
			case JokerListBeanData:
				return jokerListBeanDataToJson(data as JokerListBeanData);
			case NewsDetailBeanEntity:
				return newsDetailBeanEntityToJson(data as NewsDetailBeanEntity);
			case NewsDetailBeanData:
				return newsDetailBeanDataToJson(data as NewsDetailBeanData);
			case NewsDetailBeanDataImages:
				return newsDetailBeanDataImagesToJson(data as NewsDetailBeanDataImages);
			case PhoneLocalBeanEntity:
				return phoneLocalBeanEntityToJson(data as PhoneLocalBeanEntity);
			case PhoneLocalBeanData:
				return phoneLocalBeanDataToJson(data as PhoneLocalBeanData);
			case HistoryTodayListBeanEntity:
				return historyTodayListBeanEntityToJson(data as HistoryTodayListBeanEntity);
			case HistoryTodayListBeanData:
				return historyTodayListBeanDataToJson(data as HistoryTodayListBeanData);
			case RubbishClassifyBeanEntity:
				return rubbishClassifyBeanEntityToJson(data as RubbishClassifyBeanEntity);
			case RubbishClassifyBeanData:
				return rubbishClassifyBeanDataToJson(data as RubbishClassifyBeanData);
			case RubbishClassifyBeanDataAim:
				return rubbishClassifyBeanDataAimToJson(data as RubbishClassifyBeanDataAim);
			case RubbishClassifyBeanDataRecommendList:
				return rubbishClassifyBeanDataRecommendListToJson(data as RubbishClassifyBeanDataRecommendList);
			case NewsClassifyBeanEntity:
				return newsClassifyBeanEntityToJson(data as NewsClassifyBeanEntity);
			case NewsClassifyBeanData:
				return newsClassifyBeanDataToJson(data as NewsClassifyBeanData);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (NewsListBeanEntity).toString()){
			return NewsListBeanEntity().fromJson(json);
		}
		if(type == (NewsListBeanData).toString()){
			return NewsListBeanData().fromJson(json);
		}
		if(type == (IpBeanEntity).toString()){
			return IpBeanEntity().fromJson(json);
		}
		if(type == (IpBeanData).toString()){
			return IpBeanData().fromJson(json);
		}
		if(type == (DictionaryBeanEntity).toString()){
			return DictionaryBeanEntity().fromJson(json);
		}
		if(type == (DictionaryBeanData).toString()){
			return DictionaryBeanData().fromJson(json);
		}
		if(type == (DailyWordsBeanEntity).toString()){
			return DailyWordsBeanEntity().fromJson(json);
		}
		if(type == (DailyWordsBeanData).toString()){
			return DailyWordsBeanData().fromJson(json);
		}
		if(type == (JokerListBeanEntity).toString()){
			return JokerListBeanEntity().fromJson(json);
		}
		if(type == (JokerListBeanData).toString()){
			return JokerListBeanData().fromJson(json);
		}
		if(type == (NewsDetailBeanEntity).toString()){
			return NewsDetailBeanEntity().fromJson(json);
		}
		if(type == (NewsDetailBeanData).toString()){
			return NewsDetailBeanData().fromJson(json);
		}
		if(type == (NewsDetailBeanDataImages).toString()){
			return NewsDetailBeanDataImages().fromJson(json);
		}
		if(type == (PhoneLocalBeanEntity).toString()){
			return PhoneLocalBeanEntity().fromJson(json);
		}
		if(type == (PhoneLocalBeanData).toString()){
			return PhoneLocalBeanData().fromJson(json);
		}
		if(type == (HistoryTodayListBeanEntity).toString()){
			return HistoryTodayListBeanEntity().fromJson(json);
		}
		if(type == (HistoryTodayListBeanData).toString()){
			return HistoryTodayListBeanData().fromJson(json);
		}
		if(type == (RubbishClassifyBeanEntity).toString()){
			return RubbishClassifyBeanEntity().fromJson(json);
		}
		if(type == (RubbishClassifyBeanData).toString()){
			return RubbishClassifyBeanData().fromJson(json);
		}
		if(type == (RubbishClassifyBeanDataAim).toString()){
			return RubbishClassifyBeanDataAim().fromJson(json);
		}
		if(type == (RubbishClassifyBeanDataRecommendList).toString()){
			return RubbishClassifyBeanDataRecommendList().fromJson(json);
		}
		if(type == (NewsClassifyBeanEntity).toString()){
			return NewsClassifyBeanEntity().fromJson(json);
		}
		if(type == (NewsClassifyBeanData).toString()){
			return NewsClassifyBeanData().fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<NewsListBeanEntity>[] is M){
			return data.map<NewsListBeanEntity>((e) => NewsListBeanEntity().fromJson(e)).toList() as M;
		}
		if(<NewsListBeanData>[] is M){
			return data.map<NewsListBeanData>((e) => NewsListBeanData().fromJson(e)).toList() as M;
		}
		if(<IpBeanEntity>[] is M){
			return data.map<IpBeanEntity>((e) => IpBeanEntity().fromJson(e)).toList() as M;
		}
		if(<IpBeanData>[] is M){
			return data.map<IpBeanData>((e) => IpBeanData().fromJson(e)).toList() as M;
		}
		if(<DictionaryBeanEntity>[] is M){
			return data.map<DictionaryBeanEntity>((e) => DictionaryBeanEntity().fromJson(e)).toList() as M;
		}
		if(<DictionaryBeanData>[] is M){
			return data.map<DictionaryBeanData>((e) => DictionaryBeanData().fromJson(e)).toList() as M;
		}
		if(<DailyWordsBeanEntity>[] is M){
			return data.map<DailyWordsBeanEntity>((e) => DailyWordsBeanEntity().fromJson(e)).toList() as M;
		}
		if(<DailyWordsBeanData>[] is M){
			return data.map<DailyWordsBeanData>((e) => DailyWordsBeanData().fromJson(e)).toList() as M;
		}
		if(<JokerListBeanEntity>[] is M){
			return data.map<JokerListBeanEntity>((e) => JokerListBeanEntity().fromJson(e)).toList() as M;
		}
		if(<JokerListBeanData>[] is M){
			return data.map<JokerListBeanData>((e) => JokerListBeanData().fromJson(e)).toList() as M;
		}
		if(<NewsDetailBeanEntity>[] is M){
			return data.map<NewsDetailBeanEntity>((e) => NewsDetailBeanEntity().fromJson(e)).toList() as M;
		}
		if(<NewsDetailBeanData>[] is M){
			return data.map<NewsDetailBeanData>((e) => NewsDetailBeanData().fromJson(e)).toList() as M;
		}
		if(<NewsDetailBeanDataImages>[] is M){
			return data.map<NewsDetailBeanDataImages>((e) => NewsDetailBeanDataImages().fromJson(e)).toList() as M;
		}
		if(<PhoneLocalBeanEntity>[] is M){
			return data.map<PhoneLocalBeanEntity>((e) => PhoneLocalBeanEntity().fromJson(e)).toList() as M;
		}
		if(<PhoneLocalBeanData>[] is M){
			return data.map<PhoneLocalBeanData>((e) => PhoneLocalBeanData().fromJson(e)).toList() as M;
		}
		if(<HistoryTodayListBeanEntity>[] is M){
			return data.map<HistoryTodayListBeanEntity>((e) => HistoryTodayListBeanEntity().fromJson(e)).toList() as M;
		}
		if(<HistoryTodayListBeanData>[] is M){
			return data.map<HistoryTodayListBeanData>((e) => HistoryTodayListBeanData().fromJson(e)).toList() as M;
		}
		if(<RubbishClassifyBeanEntity>[] is M){
			return data.map<RubbishClassifyBeanEntity>((e) => RubbishClassifyBeanEntity().fromJson(e)).toList() as M;
		}
		if(<RubbishClassifyBeanData>[] is M){
			return data.map<RubbishClassifyBeanData>((e) => RubbishClassifyBeanData().fromJson(e)).toList() as M;
		}
		if(<RubbishClassifyBeanDataAim>[] is M){
			return data.map<RubbishClassifyBeanDataAim>((e) => RubbishClassifyBeanDataAim().fromJson(e)).toList() as M;
		}
		if(<RubbishClassifyBeanDataRecommendList>[] is M){
			return data.map<RubbishClassifyBeanDataRecommendList>((e) => RubbishClassifyBeanDataRecommendList().fromJson(e)).toList() as M;
		}
		if(<NewsClassifyBeanEntity>[] is M){
			return data.map<NewsClassifyBeanEntity>((e) => NewsClassifyBeanEntity().fromJson(e)).toList() as M;
		}
		if(<NewsClassifyBeanData>[] is M){
			return data.map<NewsClassifyBeanData>((e) => NewsClassifyBeanData().fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}